# -*- coding: utf-8 -*-
"""Assn_7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14JMu4DwvO1Ez7l9hckmh8QyokFYCyahc

1. Extract Sample document and apply following document preprocessing methods: tokenization, POS Tagging, stop words removal, stemming and lemmatization
2. Create repesentation of documents by calculating Term Frequency and InverseDocumentFrequency
"""



import nltk
from nltk import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
from  nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer

sentence = "Hello I am Gayatri Deshmukh. I am from Nanded District. I will be an Engineer in few months."

#Tokenization
nltk.download('punkt')
tokenized_words = word_tokenize(sentence)
tokenized_sentences = sent_tokenize(sentence)

print(tokenized_words)
print(tokenized_sentences)

#Stop words removal
nltk.download('stopwords')
stop_words = stopwords.words('english')

cleaned_token = []
for i in tokenized_words:
  if i not in stop_words:
    cleaned_token.append(i)

print("Unclean version ", tokenized_words)
print("Clean Version", cleaned_token)

#Stemming
snowball_stemmer = SnowballStemmer('english')

stemmed_words = []
for i in tokenized_words:
    stemmed = snowball_stemmer.stem(i)
    stemmed_words.append(stemmed)

print(stemmed_words)

#Lemmatization
nltk.download('wordnet')
wordnet_lemmatizer = WordNetLemmatizer()

lemmatized_words = []
for i in tokenized_words:
    lemmatized = wordnet_lemmatizer.lemmatize(i)
    lemmatized_words.append(lemmatized)

print(lemmatized_words)

#Pos Tagging
# dt - determinnant
# NN - noun
# In - prep / conjunc
nltk.download('averaged_perceptron_tagger')
pos_tag = nltk.pos_tag(tokenized_words)

print(pos_tag)

d0 = "Good Morning"
d1 = "Do daily exercise in the morning "
d2 = "exercise is good for health"
series = [d0, d1, d2]
tfidf = TfidfVectorizer()
result = tfidf.fit_transform(series)

print("Word Indexing: ", tfidf.vocabulary_)
print("tf-idf in matrix form: \n", result.toarray())